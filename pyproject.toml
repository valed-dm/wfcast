[project]
name = "wfcast"
version = "0.1.0"
description = "Someplace weather forecast Django example app."
authors = [
    {name = "dmvaled",email = "dmvaled@gmail.com"}
]
readme = "README.md"
license = "MIT"
keywords = ["weather", "forecast", "city", "widget"]
requires-python = ">=3.12"
dependencies = [
    # Base dependencies
    "python-slugify==8.0.4",
    "Pillow==11.2.1",
    "argon2-cffi==23.1.0",
    "whitenoise==6.9.0",
    "redis==6.2.0",
    "hiredis==3.2.1",
    # Django core
    "django==5.2.1",
    "django-environ==0.12.0",
    "django-model-utils==5.0.0",
    "django-allauth[mfa]==65.8.1",
    "django-crispy-forms==2.4",
    "crispy-bootstrap5==2025.4",
    "django-redis==5.4.0",
]

[project.optional-dependencies]
production = [
    "gunicorn==23.0.0",
    "psycopg[c]==3.2.9",
    "django-anymail==13.0",
]

dev = [
    "Werkzeug[watchdog]==3.1.3",
    "ipdb==0.13.13",
    # Testing
    "mypy==1.16.0",
    "django-stubs[compatible-mypy]==5.2.0",
    "django-types==0.20.0",
    "pytest==8.3.5",
    "pytest-sugar==1.0.0",
    # Documentation
    "sphinx==8.2.3",
    "sphinx-autobuild==2024.10.3",
    # Code quality
    "ruff==0.11.12",
    "coverage==7.8.2",
    "djlint==1.36.4",
    "pre-commit==4.2.0",
    # Django dev tools
    "factory-boy==3.3.3",
    "django-debug-toolbar==5.2.0",
    "django-extensions==4.1",
    "django-coverage-plugin==3.1.0",
    "pytest-django==4.11.1",
]

[build-system]
requires = ["setuptools>=64.0.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = { find = {} }

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
]

[tool.coverage.run]
include = ["wfcast/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

[tool.mypy]
config_file = "mypy.ini"
files = ["wfcast", "tests"]

[tool.django-stubs]
django_settings_module = "config.settings.test"

[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

[tool.ruff]
line-length = 88
target-version = "py312"
fix = true
# Exclude a variety of commonly ignored directories.
extend-exclude = [
    "*/migrations/*.py",
    "staticfiles/*",
]

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TC",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF",
]
ignore = [
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
  "UP038", # Checks for uses of isinstance/issubclass that take a tuple
          # of types for comparison.
          # Deactivated because it can make the code slow:
          # https://github.com/astral-sh/ruff/issues/7871
]
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
  "UP038",
]

[tool.ruff.lint.isort]
force-single-line = true
combine-as-imports = false
force-sort-within-sections = true
lines-after-imports = 2
